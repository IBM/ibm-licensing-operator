//go:build !ignore_autogenerated
// +build !ignore_autogenerated

//
// Copyright 2023 IBM Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensingDefinition) DeepCopyInto(out *IBMLicensingDefinition) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	out.Status = in.Status
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensingDefinition.
func (in *IBMLicensingDefinition) DeepCopy() *IBMLicensingDefinition {
	if in == nil {
		return nil
	}
	out := new(IBMLicensingDefinition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *IBMLicensingDefinition) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensingDefinitionCondition) DeepCopyInto(out *IBMLicensingDefinitionCondition) {
	*out = *in
	in.Metadata.DeepCopyInto(&out.Metadata)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensingDefinitionCondition.
func (in *IBMLicensingDefinitionCondition) DeepCopy() *IBMLicensingDefinitionCondition {
	if in == nil {
		return nil
	}
	out := new(IBMLicensingDefinitionCondition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensingDefinitionConditionMetadata) DeepCopyInto(out *IBMLicensingDefinitionConditionMetadata) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensingDefinitionConditionMetadata.
func (in *IBMLicensingDefinitionConditionMetadata) DeepCopy() *IBMLicensingDefinitionConditionMetadata {
	if in == nil {
		return nil
	}
	out := new(IBMLicensingDefinitionConditionMetadata)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensingDefinitionList) DeepCopyInto(out *IBMLicensingDefinitionList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]IBMLicensingDefinition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensingDefinitionList.
func (in *IBMLicensingDefinitionList) DeepCopy() *IBMLicensingDefinitionList {
	if in == nil {
		return nil
	}
	out := new(IBMLicensingDefinitionList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *IBMLicensingDefinitionList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensingDefinitionSpec) DeepCopyInto(out *IBMLicensingDefinitionSpec) {
	*out = *in
	in.Condition.DeepCopyInto(&out.Condition)
	if in.Set != nil {
		in, out := &in.Set, &out.Set
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensingDefinitionSpec.
func (in *IBMLicensingDefinitionSpec) DeepCopy() *IBMLicensingDefinitionSpec {
	if in == nil {
		return nil
	}
	out := new(IBMLicensingDefinitionSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensingDefinitionStatus) DeepCopyInto(out *IBMLicensingDefinitionStatus) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensingDefinitionStatus.
func (in *IBMLicensingDefinitionStatus) DeepCopy() *IBMLicensingDefinitionStatus {
	if in == nil {
		return nil
	}
	out := new(IBMLicensingDefinitionStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensingQuerySource) DeepCopyInto(out *IBMLicensingQuerySource) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	out.Status = in.Status
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensingQuerySource.
func (in *IBMLicensingQuerySource) DeepCopy() *IBMLicensingQuerySource {
	if in == nil {
		return nil
	}
	out := new(IBMLicensingQuerySource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *IBMLicensingQuerySource) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensingQuerySourceList) DeepCopyInto(out *IBMLicensingQuerySourceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]IBMLicensingQuerySource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensingQuerySourceList.
func (in *IBMLicensingQuerySourceList) DeepCopy() *IBMLicensingQuerySourceList {
	if in == nil {
		return nil
	}
	out := new(IBMLicensingQuerySourceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *IBMLicensingQuerySourceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensingQuerySourceSpec) DeepCopyInto(out *IBMLicensingQuerySourceSpec) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensingQuerySourceSpec.
func (in *IBMLicensingQuerySourceSpec) DeepCopy() *IBMLicensingQuerySourceSpec {
	if in == nil {
		return nil
	}
	out := new(IBMLicensingQuerySourceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensingQuerySourceStatus) DeepCopyInto(out *IBMLicensingQuerySourceStatus) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensingQuerySourceStatus.
func (in *IBMLicensingQuerySourceStatus) DeepCopy() *IBMLicensingQuerySourceStatus {
	if in == nil {
		return nil
	}
	out := new(IBMLicensingQuerySourceStatus)
	in.DeepCopyInto(out)
	return out
}
