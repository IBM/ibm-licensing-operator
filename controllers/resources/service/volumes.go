//
// Copyright 2023 IBM Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package service

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"

	operatorv1alpha1 "github.com/IBM/ibm-licensing-operator/api/v1alpha1"
	"github.com/IBM/ibm-licensing-operator/controllers/resources"
)

const APISecretTokenVolumeName = "api-token"
const APIUploadTokenVolumeName = "token-upload"
const MeteringAPICertsVolumeName = "metering-api-certs"
const LicensingHTTPSCertsVolumeName = "licensing-https-certs"
const PrometheusHTTPSCertsVolumeName = "prometheus-https-certs"
const ReporterHTTPSCertsVolumeName = "reporter-https-certs"
const EmptyDirVolumeName = "tmp"
const ReporterTokenVolumeName = "reporter-token"

var emptyDirSizeLimit600Mi, _ = resource.ParseQuantity("600Mi")

func getLicensingVolumeMounts(spec operatorv1alpha1.IBMLicensingSpec) []corev1.VolumeMount {
	var volumeMounts = []corev1.VolumeMount{
		{
			Name:      APISecretTokenVolumeName,
			MountPath: "/opt/ibm/licensing/" + APISecretTokenKeyName,
			SubPath:   APISecretTokenKeyName,
			ReadOnly:  true,
		},
		{
			Name:      APIUploadTokenVolumeName,
			MountPath: "/opt/ibm/licensing/" + APIUploadTokenKeyName,
			SubPath:   APIUploadTokenKeyName,
			ReadOnly:  true,
		},
		{
			Name:      EmptyDirVolumeName,
			MountPath: "/tmp",
			ReadOnly:  false,
		},
	}

	if spec.HTTPSEnable {
		volumeMounts = append(volumeMounts, []corev1.VolumeMount{
			{
				Name:      LicensingHTTPSCertsVolumeName,
				MountPath: "/opt/licensing/certs/",
				ReadOnly:  true,
			},
		}...)
		if spec.IsPrometheusServiceNeeded() {
			volumeMounts = append(volumeMounts, []corev1.VolumeMount{
				{
					Name:      PrometheusHTTPSCertsVolumeName,
					MountPath: "/opt/prometheus/certs",
					ReadOnly:  true,
				},
			}...)
		}
	}

	if spec.IsMetering() {
		volumeMounts = append(volumeMounts, []corev1.VolumeMount{
			{
				Name:      MeteringAPICertsVolumeName,
				MountPath: "/opt/metering/certs/",
				ReadOnly:  true,
			},
		}...)
	}

	if spec.Sender != nil {
		volumeMounts = append(volumeMounts, []corev1.VolumeMount{
			{
				Name:      ReporterTokenVolumeName,
				MountPath: "/opt/ibm/licensing/reporter-token",
				ReadOnly:  true,
			},
		}...)

		// volume mount for the license service reporter certificate used by sender
		if spec.Sender.ReporterCertsSecretName != "" && spec.Sender.ValidateReporterCerts {
			volumeMounts = append(volumeMounts, []corev1.VolumeMount{
				{
					Name:      ReporterHTTPSCertsVolumeName,
					MountPath: "/opt/ibm/licensing/reporter-certs",
					ReadOnly:  true,
				},
			}...)
		}
	}

	return volumeMounts
}

func getLicensingVolumes(spec operatorv1alpha1.IBMLicensingSpec) []corev1.Volume {
	var volumes []corev1.Volume

	volumes = append(volumes, corev1.Volume{
		Name: APISecretTokenVolumeName,
		VolumeSource: corev1.VolumeSource{
			Secret: &corev1.SecretVolumeSource{
				SecretName:  spec.APISecretToken,
				DefaultMode: &resources.DefaultSecretMode,
			},
		},
	})

	volumes = append(volumes, corev1.Volume{
		Name: APIUploadTokenVolumeName,
		VolumeSource: corev1.VolumeSource{
			Secret: &corev1.SecretVolumeSource{
				SecretName:  APIUploadTokenName,
				DefaultMode: &resources.DefaultSecretMode,
			},
		},
	})

	if spec.IsMetering() {
		volumes = append(volumes, corev1.Volume{
			Name: MeteringAPICertsVolumeName,
			VolumeSource: corev1.VolumeSource{
				Secret: &corev1.SecretVolumeSource{
					SecretName:  "icp-metering-api-secret",
					DefaultMode: &resources.DefaultSecretMode,
					Optional:    &resources.TrueVar,
				},
			},
		})
	}

	if spec.HTTPSEnable {
		// if on OCP, append volume containing internal certificate generated by ocp cert manager
		volumes = append(volumes, resources.GetVolume(LicensingHTTPSCertsVolumeName, LicenseServiceInternalCertName))
		if spec.IsPrometheusServiceNeeded() {
			volumes = append(volumes, resources.GetVolume(PrometheusHTTPSCertsVolumeName, PrometheusServiceOCPCertName))
		}
	}

	volumes = append(volumes, corev1.Volume{
		Name: EmptyDirVolumeName,
		VolumeSource: corev1.VolumeSource{
			EmptyDir: &corev1.EmptyDirVolumeSource{
				SizeLimit: &emptyDirSizeLimit600Mi,
			},
		},
	})

	if spec.Sender != nil {
		var secretName string
		if spec.Sender.ReporterSecretToken != "" {
			secretName = spec.Sender.ReporterSecretToken
		} else {
			secretName = spec.GetDefaultReporterTokenName()
		}

		volumes = append(volumes, corev1.Volume{
			Name: ReporterTokenVolumeName,
			VolumeSource: corev1.VolumeSource{
				Secret: &corev1.SecretVolumeSource{
					SecretName:  secretName,
					DefaultMode: &resources.DefaultSecretMode,
				},
			},
		})

		// create volume containing internal certificate from reporter
		if spec.Sender.ReporterCertsSecretName != "" && spec.Sender.ValidateReporterCerts {
			volumes = append(volumes, corev1.Volume{
				Name: ReporterHTTPSCertsVolumeName,
				VolumeSource: corev1.VolumeSource{
					Secret: &corev1.SecretVolumeSource{
						SecretName:  spec.Sender.ReporterCertsSecretName,
						DefaultMode: &resources.DefaultSecretMode,
					},
				},
			})
		}
	}

	return volumes
}
