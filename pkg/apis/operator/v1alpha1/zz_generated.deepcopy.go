// +build !ignore_autogenerated

//
// Copyright 2020 IBM Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by operator-sdk. DO NOT EDIT.

package v1alpha1

import (
	v1 "github.com/openshift/api/route/v1"
	corev1 "k8s.io/api/core/v1"
	v1beta1 "k8s.io/api/extensions/v1beta1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensing) DeepCopyInto(out *IBMLicensing) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensing.
func (in *IBMLicensing) DeepCopy() *IBMLicensing {
	if in == nil {
		return nil
	}
	out := new(IBMLicensing)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *IBMLicensing) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensingIngressOptions) DeepCopyInto(out *IBMLicensingIngressOptions) {
	*out = *in
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.TLS != nil {
		in, out := &in.TLS, &out.TLS
		*out = make([]v1beta1.IngressTLS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensingIngressOptions.
func (in *IBMLicensingIngressOptions) DeepCopy() *IBMLicensingIngressOptions {
	if in == nil {
		return nil
	}
	out := new(IBMLicensingIngressOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensingList) DeepCopyInto(out *IBMLicensingList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]IBMLicensing, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensingList.
func (in *IBMLicensingList) DeepCopy() *IBMLicensingList {
	if in == nil {
		return nil
	}
	out := new(IBMLicensingList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *IBMLicensingList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensingRouteOptions) DeepCopyInto(out *IBMLicensingRouteOptions) {
	*out = *in
	if in.TLS != nil {
		in, out := &in.TLS, &out.TLS
		*out = new(v1.TLSConfig)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensingRouteOptions.
func (in *IBMLicensingRouteOptions) DeepCopy() *IBMLicensingRouteOptions {
	if in == nil {
		return nil
	}
	out := new(IBMLicensingRouteOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensingSecurityContext) DeepCopyInto(out *IBMLicensingSecurityContext) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensingSecurityContext.
func (in *IBMLicensingSecurityContext) DeepCopy() *IBMLicensingSecurityContext {
	if in == nil {
		return nil
	}
	out := new(IBMLicensingSecurityContext)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensingSpec) DeepCopyInto(out *IBMLicensingSpec) {
	*out = *in
	if in.SecurityContext != nil {
		in, out := &in.SecurityContext, &out.SecurityContext
		*out = new(IBMLicensingSecurityContext)
		**out = **in
	}
	if in.ImagePullSecrets != nil {
		in, out := &in.ImagePullSecrets, &out.ImagePullSecrets
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.RouteEnabled != nil {
		in, out := &in.RouteEnabled, &out.RouteEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IngressEnabled != nil {
		in, out := &in.IngressEnabled, &out.IngressEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IngressOptions != nil {
		in, out := &in.IngressOptions, &out.IngressOptions
		*out = new(IBMLicensingIngressOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.RouteOptions != nil {
		in, out := &in.RouteOptions, &out.RouteOptions
		*out = new(IBMLicensingRouteOptions)
		(*in).DeepCopyInto(*out)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensingSpec.
func (in *IBMLicensingSpec) DeepCopy() *IBMLicensingSpec {
	if in == nil {
		return nil
	}
	out := new(IBMLicensingSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IBMLicensingStatus) DeepCopyInto(out *IBMLicensingStatus) {
	*out = *in
	if in.LicensingPods != nil {
		in, out := &in.LicensingPods, &out.LicensingPods
		*out = make([]corev1.PodStatus, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IBMLicensingStatus.
func (in *IBMLicensingStatus) DeepCopy() *IBMLicensingStatus {
	if in == nil {
		return nil
	}
	out := new(IBMLicensingStatus)
	in.DeepCopyInto(out)
	return out
}
