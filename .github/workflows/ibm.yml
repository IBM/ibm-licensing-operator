# This workflow will build a kuberneties cluster, deploy License Service instance
# and run certification tests to confirm basic functionality
#
# To configure this workflow:
#
# 1. Ensure that your repository contains a Dockerfile
# 2. Setup secrets in your repository by going to Settings | Secrets: IBM_CLOUD_API_KEY
#      to value:
#          IBM Cloud -> Manage -> Access (AIM)
#          On the left menu: API Keys -> Create an IBM Cloud API key
# 3. Change the values for the env variables if needed


name: Build and Deploy to IKS

on:
  push:
    branches: [ martabereta-cert-tests ]
  pull_request:
    branches: [ master ]
  release:
    types: [created]

# Environment variables available to all jobs and steps in this workflow
env:
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
  IBM_CLOUD_REGION: eu-de
  IBM_CLOUD_RESOURCE_GROUP: Default
  IKS_CLUSTER_NAME: LS_cluster
  IKS_CLUSTER_ZONE: dal10
  IKS_CLUSTER_PRIVATE_VLAN: 2887074
  IKS_CLUSTER_PUBLIC_VLAN: 2887072 #b2c.4x16
  IKS_CLUSTER_FLAVOR: u3c.2x4
  IKS_CLUSTER_TAG_NAMES: owner:marta.bereta,team:CP4MCM,Usage:temp,Usage_desc:'Certification tests',Review_freq:month
  LS_PATH: xxx
  IKS_INGRESS_SUBDOMAIN: xxx

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      # Download and Install IBM Cloud CLI
      - name: Install IBM Cloud CLI
        run: |
          curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
          ibmcloud --version
          ibmcloud config --check-version=false
          ibmcloud plugin install -f kubernetes-service
          ibmcloud plugin install -f container-registry

      # Authenticate with IBM Cloud CLI
      - name: Authenticate with IBM Cloud CLI
        run: |
          ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g "${IBM_CLOUD_RESOURCE_GROUP}"
          ibmcloud cr region-set "${IBM_CLOUD_REGION}"
          ibmcloud cr login

      # Check if the particular cluster exists
      - name: Check if k8s exists
        id: cluster_existence
        run: ibmcloud ks cluster ls | grep -e $IKS_CLUSTER_NAME[[:space:]]

      # Create k8s cluster if such not exists
      - name: Create K8s
        if: ${{ failure() }}
        run: |
          ibmcloud target -g $IBM_CLOUD_RESOURCE_GROUP
          ibmcloud ks cluster create classic --name $IKS_CLUSTER_NAME --zone $IKS_CLUSTER_ZONE --flavor $IKS_CLUSTER_FLAVOR --hardware shared --workers 1 --public-vlan $IKS_CLUSTER_PUBLIC_VLAN --private-vlan $IKS_CLUSTER_PRIVATE_VLAN
        # ibmcloud resource tag-attach --resource-name $IKS_CLUSTER_NAME --tag-names $IKS_CLUSTER_TAG_NAMES

      # Use existing k8s cluster if already found in step "Check if k8s exists"
      - name: Use existing k8s cluster
        if: ${{ success() }}
        run: echo 'The cluster ' $IKS_CLUSTER_NAME ' will be used'

      - name: Check K8s
        run: ./scripts/check_cluster.sh $IKS_CLUSTER_NAME

      - name: Cluster connection
        run: |
          ibmcloud login --apikey $IBM_CLOUD_API_KEY
          ibmcloud target -g Default

#      - name: Tags for cluster
#        run: ibmcloud resource tag-attach --resource-name $IKS_CLUSTER_NAME --tag-names $IKS_CLUSTER_TAG_NAMES

      - name: Download LS repository
        run: git clone https://github.com/IBM/ibm-licensing-operator.git

      - name: kubectl installation and configuration
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          ibmcloud ks cluster config --cluster $IKS_CLUSTER_NAME
          kubectl config current-context

      - name: Install License Service
        run:  ./ibm-licensing-operator/common/scripts/ibm_licensing_operator_install.sh --olm_global_catalog_namespace ibm-common-services

      - name: Get Ingress settings
        run: echo '::set-env name=IKS_INGRESS_SUBDOMAIN::$(ibmcloud ks cluster get -c licenseService_cluster | grep  "Ingress Subdomain:" | awk '{print $3}')'

      - name: Configure License Service
        run: |
          echo '::set-env name=LS_PATH::/ibm-licensing-service-instance'
          cat <<EOF | kubectl apply -f -
          apiVersion: operator.ibm.com/v1alpha1
          kind: IBMLicensing
          metadata:
            name: instance
          spec:
            apiSecretToken: ibm-licensing-token
            datasource: datacollector
            httpsEnable: false
            instanceNamespace: ibm-common-services
            ingressEnabled: true
            ingressOptions:
              annotations:
                ingress.bluemix.net/rewrite-path: "serviceName=ibm-licensing-service-instance rewrite=/"
              path: $LS_PATH
              host: $IKS_INGRESS_SUBDOMAIN
          EOF

      - name: Test License Service
        run: |
          export URL="http://"$IKS_INGRESS_SUBDOMAIN$LS_PATH
          echo "LS_PATH:"$LS_PATH
          echo "IKS_INGRESS_SUBDOMAIN:"$IKS_INGRESS_SUBDOMAIN
          echo URL $URL
          ./scripts/test_LicenseService.sh $IKS_INGRESS_SUBDOMAIN $LS_PATH
